{%- layout none -%}
<div class="t4-import">
	<div class="t4-import-popup">
		<div class="t4-import-head">
			<div class="t4-import-logo">
				<a href="https://the4.co/" class="t4-logo">
					<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="svg" version="1.1" width="400" height="180.8" viewBox="0, 0, 400,180.8"><g id="svgg"><path id="path0" d="M279.685 33.535 C 279.599 33.758,279.640 38.518,279.736 39.472 C 279.754 39.649,279.926 39.892,280.119 40.013 C 280.450 40.219,280.470 40.470,280.470 44.347 C 280.470 48.196,280.493 48.486,280.825 48.818 C 281.155 49.147,281.182 49.457,281.205 53.103 C 281.230 57.132,281.328 57.866,281.841 57.866 C 282.048 57.866,282.100 57.961,282.015 58.182 C 281.735 58.913,282.133 66.515,282.471 66.878 C 282.755 67.183,282.798 67.708,282.851 71.510 C 282.904 75.279,282.948 75.825,283.216 76.021 C 283.479 76.213,283.524 76.661,283.546 79.306 C 283.578 83.309,283.692 84.415,284.113 84.836 C 284.420 85.143,284.448 85.519,284.448 89.226 C 284.448 93.412,284.493 93.852,284.920 93.852 C 285.126 93.852,285.173 94.468,285.179 97.242 C 285.189 101.792,285.253 102.493,285.706 102.974 C 286.056 103.347,286.076 103.587,286.076 107.324 C 286.076 110.985,286.102 111.306,286.426 111.652 C 286.747 111.995,286.780 112.367,286.833 116.211 C 286.883 119.877,286.929 120.440,287.203 120.743 C 287.475 121.043,287.529 121.639,287.609 125.237 C 287.695 129.087,287.727 129.406,288.059 129.682 C 288.383 129.950,288.422 130.243,288.467 132.756 C 288.516 135.441,288.530 135.535,288.906 135.589 C 289.119 135.619,289.335 135.802,289.386 135.996 C 289.467 136.307,289.644 136.347,290.941 136.347 C 292.279 136.347,292.446 136.402,292.390 136.824 C 292.355 137.086,292.916 137.246,293.876 137.249 C 294.741 137.251,294.909 137.306,294.989 137.613 C 295.074 137.937,295.236 137.975,296.547 137.975 C 297.712 137.975,298.011 138.029,298.011 138.240 C 298.011 138.631,298.602 138.879,299.536 138.879 C 300.121 138.879,300.467 138.984,300.723 139.241 C 301.016 139.533,301.326 139.602,302.351 139.602 C 303.316 139.602,303.617 139.662,303.617 139.856 C 303.617 140.176,304.545 140.506,305.443 140.506 C 305.906 140.506,306.187 140.608,306.305 140.819 C 306.440 141.060,306.787 141.146,307.835 141.199 C 308.980 141.257,309.204 141.321,309.280 141.610 C 309.356 141.903,309.543 141.953,310.553 141.953 C 311.356 141.953,311.783 142.032,311.881 142.198 C 312.143 142.642,312.800 142.857,313.892 142.857 C 314.807 142.857,314.965 142.905,314.944 143.174 C 314.922 143.443,315.108 143.498,316.192 143.542 C 317.239 143.585,317.558 143.674,317.983 144.040 C 318.387 144.387,318.704 144.485,319.424 144.485 C 320.151 144.485,320.395 144.561,320.573 144.846 C 320.768 145.159,320.995 145.208,322.244 145.208 C 323.536 145.208,323.689 145.244,323.689 145.547 C 323.689 145.911,324.307 146.112,325.420 146.112 C 325.804 146.112,326.086 146.226,326.198 146.427 C 326.337 146.675,326.680 146.755,327.834 146.807 C 329.124 146.866,329.295 146.914,329.295 147.216 C 329.295 147.748,332.174 147.731,332.508 147.197 C 332.698 146.892,332.929 146.835,333.992 146.835 C 335.064 146.835,335.278 146.782,335.443 146.474 C 335.595 146.189,335.822 146.112,336.507 146.112 C 337.535 146.112,338.448 145.829,338.587 145.467 C 338.659 145.279,339.009 145.208,339.856 145.208 C 340.866 145.208,341.040 145.159,341.139 144.846 C 341.233 144.551,341.413 144.485,342.123 144.485 C 343.444 144.485,344.160 144.294,344.259 143.915 C 344.331 143.637,344.527 143.580,345.408 143.580 C 346.275 143.580,346.512 143.514,346.697 143.219 C 346.881 142.923,347.120 142.857,348.009 142.855 C 349.441 142.851,349.910 142.713,349.910 142.294 C 349.910 141.996,350.054 141.953,351.057 141.953 C 351.975 141.953,352.270 141.881,352.532 141.591 C 352.799 141.296,353.089 141.230,354.114 141.230 C 355.216 141.230,355.380 141.186,355.463 140.868 C 355.540 140.572,355.710 140.506,356.395 140.505 C 357.518 140.504,358.590 140.191,358.590 139.865 C 358.590 139.662,358.860 139.602,359.782 139.602 C 360.822 139.602,360.986 139.556,361.069 139.241 C 361.148 138.937,361.315 138.879,362.114 138.879 C 363.497 138.879,364.169 138.705,364.293 138.315 C 364.383 138.028,364.584 137.975,365.564 137.975 C 366.203 137.975,366.717 137.914,366.706 137.839 C 366.624 137.322,366.780 137.251,368.005 137.251 C 369.355 137.251,369.982 137.049,369.982 136.612 C 369.982 136.406,370.249 136.347,371.181 136.347 C 372.356 136.347,372.396 136.331,373.170 135.557 L 373.960 134.767 373.960 130.641 C 373.960 126.661,373.974 126.500,374.351 126.099 C 374.723 125.703,374.746 125.482,374.821 121.476 C 374.890 117.843,374.941 117.238,375.199 117.036 C 375.458 116.833,375.505 116.249,375.552 112.610 C 375.603 108.729,375.633 108.393,375.959 108.090 C 376.288 107.783,376.311 107.491,376.311 103.619 C 376.311 100.110,376.353 99.452,376.584 99.323 C 377.069 99.052,377.187 98.094,377.208 94.283 C 377.227 90.862,377.259 90.508,377.584 90.095 C 377.913 89.676,377.939 89.344,377.939 85.441 C 377.939 81.283,377.943 81.235,378.345 80.968 C 378.745 80.703,378.753 80.620,378.810 76.560 C 378.860 72.939,378.905 72.394,379.171 72.190 C 379.438 71.985,379.482 71.440,379.530 67.784 C 379.582 63.856,379.608 63.582,379.971 63.091 C 380.331 62.603,380.362 62.302,380.437 58.454 C 380.509 54.784,380.554 54.293,380.855 53.909 C 381.162 53.518,381.193 53.112,381.193 49.552 C 381.193 45.855,381.215 45.607,381.555 45.298 C 381.898 44.989,381.917 44.741,381.917 40.671 C 381.917 36.613,381.936 36.365,382.259 36.263 C 383.006 36.026,382.898 33.882,382.118 33.465 C 381.496 33.132,279.813 33.201,279.685 33.535 M309.182 48.724 C 309.471 49.091,309.551 49.594,309.652 51.663 C 309.719 53.036,309.932 55.583,310.125 57.324 C 310.317 59.064,310.556 61.587,310.655 62.929 C 310.754 64.272,310.921 66.266,311.025 67.360 C 311.540 72.775,311.801 75.706,311.956 77.848 C 312.050 79.141,312.288 81.623,312.485 83.363 C 312.681 85.104,312.842 86.818,312.841 87.172 C 312.837 88.493,311.332 88.381,330.953 88.524 L 348.615 88.652 349.062 88.206 C 349.474 87.794,349.518 87.578,349.638 85.426 C 349.709 84.142,349.840 82.482,349.929 81.736 C 350.018 80.990,350.254 78.345,350.455 75.859 C 350.655 73.373,350.857 71.216,350.904 71.067 C 350.951 70.918,351.070 69.616,351.170 68.174 C 351.269 66.731,351.511 63.883,351.706 61.844 C 351.902 59.806,352.153 57.080,352.264 55.787 C 352.704 50.660,352.930 48.806,353.142 48.594 C 353.385 48.350,363.806 48.158,365.235 48.371 C 366.276 48.526,366.396 48.813,366.192 50.660 C 366.101 51.491,365.899 53.675,365.744 55.515 C 365.589 57.355,365.342 59.959,365.194 61.302 C 365.046 62.645,364.880 64.557,364.824 65.552 C 364.768 66.546,364.567 68.865,364.376 70.705 C 364.185 72.545,363.951 75.108,363.857 76.401 C 363.700 78.534,363.459 81.246,362.924 86.890 C 362.821 87.984,362.656 89.937,362.558 91.230 C 362.461 92.523,362.222 95.127,362.029 97.016 C 361.836 98.906,361.632 101.225,361.577 102.170 C 361.521 103.115,361.355 105.027,361.208 106.420 C 360.961 108.763,360.614 112.582,360.206 117.450 C 359.582 124.905,359.759 124.380,357.685 124.918 C 356.939 125.111,355.678 125.452,354.882 125.676 C 354.087 125.900,352.988 126.199,352.441 126.340 C 351.249 126.647,349.278 127.209,347.942 127.622 C 346.952 127.928,346.152 127.960,345.896 127.704 C 345.818 127.626,345.915 125.938,346.112 123.953 C 346.858 116.444,347.024 114.672,347.197 112.387 C 347.295 111.094,347.462 109.337,347.568 108.483 C 347.912 105.719,348.071 102.837,347.904 102.399 L 347.744 101.976 324.520 102.102 L 301.297 102.229 300.771 101.702 C 300.250 101.180,300.243 101.145,300.021 97.920 C 299.898 96.130,299.717 94.014,299.620 93.219 C 299.522 92.423,299.327 90.267,299.187 88.427 C 299.046 86.587,298.808 83.901,298.658 82.459 C 298.508 81.017,298.303 78.820,298.202 77.577 C 298.007 75.154,297.588 70.414,297.284 67.179 C 297.181 66.085,296.981 63.725,296.838 61.935 C 296.696 60.145,296.453 57.459,296.298 55.967 C 295.741 50.607,295.672 49.135,295.954 48.689 L 296.211 48.282 302.523 48.282 L 308.835 48.282 309.182 48.724 " stroke="none" fill="#f4797a" fill-rule="evenodd"/><path id="path1" d="M295.954 48.689 C 295.672 49.135,295.741 50.607,296.298 55.967 C 296.453 57.459,296.696 60.145,296.838 61.935 C 296.981 63.725,297.181 66.085,297.284 67.179 C 297.588 70.414,298.007 75.154,298.202 77.577 C 298.303 78.820,298.508 81.017,298.658 82.459 C 298.808 83.901,299.046 86.587,299.187 88.427 C 299.327 90.267,299.522 92.423,299.620 93.219 C 299.717 94.014,299.898 96.130,300.021 97.920 C 300.243 101.145,300.250 101.180,300.771 101.702 L 301.297 102.229 324.520 102.102 L 347.744 101.976 347.904 102.399 C 348.071 102.837,347.912 105.719,347.568 108.483 C 347.462 109.337,347.295 111.094,347.197 112.387 C 347.024 114.672,346.858 116.444,346.112 123.953 C 345.915 125.938,345.818 127.626,345.896 127.704 C 346.152 127.960,346.952 127.928,347.942 127.622 C 349.278 127.209,351.249 126.647,352.441 126.340 C 352.988 126.199,354.087 125.900,354.882 125.676 C 355.678 125.452,356.939 125.111,357.685 124.918 C 359.759 124.380,359.582 124.905,360.206 117.450 C 360.614 112.582,360.961 108.763,361.208 106.420 C 361.355 105.027,361.521 103.115,361.577 102.170 C 361.632 101.225,361.836 98.906,362.029 97.016 C 362.222 95.127,362.461 92.523,362.558 91.230 C 362.656 89.937,362.821 87.984,362.924 86.890 C 363.459 81.246,363.700 78.534,363.857 76.401 C 363.951 75.108,364.185 72.545,364.376 70.705 C 364.567 68.865,364.768 66.546,364.824 65.552 C 364.880 64.557,365.046 62.645,365.194 61.302 C 365.342 59.959,365.589 57.355,365.744 55.515 C 365.899 53.675,366.101 51.491,366.192 50.660 C 366.396 48.813,366.276 48.526,365.235 48.371 C 363.806 48.158,353.385 48.350,353.142 48.594 C 352.930 48.806,352.704 50.660,352.264 55.787 C 352.153 57.080,351.902 59.806,351.706 61.844 C 351.511 63.883,351.269 66.731,351.170 68.174 C 351.070 69.616,350.951 70.918,350.904 71.067 C 350.857 71.216,350.655 73.373,350.455 75.859 C 350.254 78.345,350.018 80.990,349.929 81.736 C 349.840 82.482,349.709 84.142,349.638 85.426 C 349.518 87.578,349.474 87.794,349.062 88.206 L 348.615 88.652 330.953 88.524 C 311.332 88.381,312.837 88.493,312.841 87.172 C 312.842 86.818,312.681 85.104,312.485 83.363 C 312.288 81.623,312.050 79.141,311.956 77.848 C 311.801 75.706,311.540 72.775,311.025 67.360 C 310.921 66.266,310.754 64.272,310.655 62.929 C 310.556 61.587,310.317 59.064,310.125 57.324 C 309.932 55.583,309.719 53.036,309.652 51.663 C 309.551 49.594,309.471 49.091,309.182 48.724 L 308.835 48.282 302.523 48.282 L 296.211 48.282 295.954 48.689 " stroke="none" fill="#fcf9f9" fill-rule="evenodd"/><path id="path2" d="M17.861 48.111 L 17.333 48.573 17.339 56.248 C 17.342 60.470,17.349 64.071,17.353 64.251 C 17.357 64.431,17.440 64.529,17.539 64.468 C 17.638 64.406,17.673 64.473,17.618 64.616 C 17.388 65.215,18.494 65.280,28.779 65.280 L 38.879 65.280 38.879 97.274 L 38.879 129.269 39.355 129.643 C 39.823 130.011,39.998 130.018,49.015 130.018 C 58.788 130.018,58.770 130.019,58.770 129.385 C 58.770 129.158,58.892 128.925,59.042 128.868 C 59.494 128.694,59.449 65.739,58.996 65.476 C 58.779 65.349,61.954 65.289,69.168 65.285 C 80.163 65.278,80.887 65.231,81.080 64.509 C 81.140 64.287,81.190 60.585,81.191 56.284 C 81.194 48.017,81.166 47.744,80.335 47.739 C 80.260 47.738,66.292 47.718,49.295 47.694 L 18.390 47.649 17.861 48.111 M103.382 47.773 C 103.272 47.841,103.117 47.856,103.038 47.807 C 102.958 47.758,102.895 66.093,102.896 88.552 C 102.898 114.981,102.961 129.289,103.074 129.114 C 103.179 128.951,103.251 128.929,103.252 129.058 C 103.254 129.176,103.161 129.331,103.047 129.402 C 102.902 129.491,102.941 129.606,103.172 129.774 C 103.713 130.170,122.105 130.130,122.503 129.732 C 122.760 129.475,122.784 127.784,122.741 112.869 L 122.694 96.293 136.754 96.340 L 150.814 96.388 150.814 112.986 C 150.814 125.654,150.865 129.635,151.031 129.801 C 151.332 130.102,169.394 130.114,170.054 129.813 C 170.744 129.499,170.713 131.442,170.710 88.692 C 170.708 48.710,170.696 47.635,170.248 47.807 C 170.121 47.856,169.980 47.858,169.935 47.813 C 169.807 47.685,151.205 47.700,150.997 47.828 C 150.875 47.904,150.814 53.164,150.814 63.483 L 150.814 79.024 136.754 79.024 L 122.694 79.024 122.742 63.456 C 122.786 48.721,122.772 47.883,122.470 47.805 C 121.948 47.669,103.599 47.638,103.382 47.773 M199.565 47.768 C 199.606 47.833,199.476 47.844,199.277 47.792 C 198.903 47.694,198.853 47.849,198.883 49.005 C 198.889 49.254,198.891 67.197,198.886 88.879 C 198.882 110.561,198.881 128.618,198.885 129.006 C 198.889 129.394,198.999 129.780,199.130 129.863 C 199.605 130.166,251.167 129.962,251.360 129.656 C 251.461 129.496,251.533 126.076,251.534 121.293 L 251.537 113.201 250.915 113.201 C 250.573 113.201,250.242 113.119,250.181 113.020 C 250.108 112.902,244.664 112.839,234.438 112.839 L 218.807 112.839 218.807 104.521 L 218.807 96.203 232.595 96.201 C 243.763 96.201,246.472 96.154,246.847 95.958 C 247.103 95.825,247.526 95.662,247.789 95.596 C 248.472 95.425,248.488 95.224,248.427 87.109 C 248.370 79.618,248.345 79.382,247.622 79.646 C 247.507 79.688,247.376 79.577,247.329 79.400 C 247.190 78.865,246.584 78.843,232.437 78.843 L 218.807 78.843 218.807 71.609 L 218.807 64.376 233.590 64.359 C 241.720 64.350,248.718 64.356,249.141 64.373 L 249.910 64.403 249.910 56.156 C 249.910 49.725,249.860 47.890,249.684 47.822 C 249.333 47.688,199.482 47.634,199.565 47.768 M151.658 48.373 C 151.658 48.522,151.552 48.644,151.422 48.644 C 151.287 48.644,151.231 48.528,151.291 48.373 C 151.348 48.223,151.454 48.101,151.526 48.101 C 151.599 48.101,151.658 48.223,151.658 48.373 M17.993 56.402 C 17.993 60.073,17.932 63.038,17.857 62.992 C 17.690 62.888,17.675 50.017,17.842 49.849 C 17.908 49.783,17.969 49.729,17.978 49.729 C 17.986 49.729,17.993 52.732,17.993 56.402 M58.725 112.085 C 58.699 120.506,58.678 113.562,58.678 96.655 C 58.678 79.747,58.699 72.857,58.725 81.343 C 58.751 89.830,58.751 103.664,58.725 112.085 M248.237 91.004 C 248.207 92.819,248.183 91.334,248.183 87.703 C 248.183 84.073,248.207 82.588,248.237 84.403 C 248.266 86.218,248.266 89.189,248.237 91.004 M169.439 129.269 C 169.439 129.333,165.554 129.345,160.805 129.296 L 152.170 129.206 160.579 129.115 C 168.841 129.025,169.439 129.035,169.439 129.269 M53.403 129.249 C 51.197 129.278,47.535 129.278,45.266 129.249 C 42.996 129.221,44.801 129.197,49.277 129.197 C 53.752 129.197,55.609 129.221,53.403 129.249 M117.134 129.249 C 114.772 129.278,110.906 129.278,108.544 129.249 C 106.182 129.221,108.115 129.197,112.839 129.197 C 117.563 129.197,119.496 129.221,117.134 129.249 M237.373 129.250 C 230.527 129.276,219.379 129.276,212.599 129.250 C 205.819 129.223,211.420 129.202,225.045 129.202 C 238.671 129.202,244.218 129.223,237.373 129.250 " stroke="none" fill="#5c6cc4" fill-rule="evenodd"/><path id="path3" d="M34.222 47.694 C 42.552 47.720,56.182 47.720,64.512 47.694 C 72.841 47.668,66.026 47.647,49.367 47.647 C 32.708 47.647,25.893 47.668,34.222 47.694 M108.544 47.694 C 110.906 47.723,114.772 47.723,117.134 47.694 C 119.496 47.666,117.563 47.642,112.839 47.642 C 108.115 47.642,106.182 47.666,108.544 47.694 M156.465 47.694 C 158.827 47.723,162.692 47.723,165.054 47.694 C 167.416 47.666,165.484 47.642,160.759 47.642 C 156.035 47.642,154.103 47.666,156.465 47.694 M212.265 47.694 C 218.962 47.721,229.866 47.721,236.497 47.694 C 243.128 47.668,237.649 47.647,224.322 47.647 C 210.995 47.647,205.569 47.668,212.265 47.694 M151.291 48.373 C 151.231 48.528,151.287 48.644,151.422 48.644 C 151.552 48.644,151.658 48.522,151.658 48.373 C 151.658 48.223,151.599 48.101,151.526 48.101 C 151.454 48.101,151.348 48.223,151.291 48.373 M198.951 49.042 C 198.784 49.209,198.734 58.279,198.734 88.764 C 198.734 110.492,198.776 128.228,198.827 128.178 C 198.878 128.127,198.919 110.360,198.919 88.697 C 198.919 60.077,198.974 49.243,199.120 49.067 C 199.370 48.766,199.245 48.747,198.951 49.042 M170.794 88.698 C 170.794 110.280,170.815 119.083,170.841 108.259 C 170.867 97.435,170.867 79.776,170.841 69.018 C 170.815 58.260,170.794 67.116,170.794 88.698 M17.842 49.849 C 17.675 50.017,17.690 62.888,17.857 62.992 C 17.932 63.038,17.993 60.073,17.993 56.402 C 17.993 52.732,17.986 49.729,17.978 49.729 C 17.969 49.729,17.908 49.783,17.842 49.849 M17.261 56.420 C 17.261 60.050,17.285 61.535,17.314 59.720 C 17.344 57.905,17.344 54.934,17.314 53.119 C 17.285 51.304,17.261 52.789,17.261 56.420 M58.678 96.655 C 58.678 113.562,58.699 120.506,58.725 112.085 C 58.751 103.664,58.751 89.830,58.725 81.343 C 58.699 72.857,58.678 79.747,58.678 96.655 M129.611 78.978 C 133.515 79.005,139.903 79.005,143.807 78.978 C 147.710 78.951,144.516 78.929,136.709 78.929 C 128.901 78.929,125.708 78.951,129.611 78.978 M248.183 87.703 C 248.183 91.334,248.207 92.819,248.237 91.004 C 248.266 89.189,248.266 86.218,248.237 84.403 C 248.207 82.588,248.183 84.073,248.183 87.703 M160.579 129.115 L 152.170 129.206 160.805 129.296 C 168.426 129.375,170.074 129.334,169.213 129.088 C 169.089 129.053,165.203 129.065,160.579 129.115 M45.266 129.249 C 47.535 129.278,51.197 129.278,53.403 129.249 C 55.609 129.221,53.752 129.197,49.277 129.197 C 44.801 129.197,42.996 129.221,45.266 129.249 M108.544 129.249 C 110.906 129.278,114.772 129.278,117.134 129.249 C 119.496 129.221,117.563 129.197,112.839 129.197 C 108.115 129.197,106.182 129.221,108.544 129.249 M212.599 129.250 C 219.379 129.276,230.527 129.276,237.373 129.250 C 244.218 129.223,238.671 129.202,225.045 129.202 C 211.420 129.202,205.819 129.223,212.599 129.250 " stroke="none" fill="#5c74c4" fill-rule="evenodd"/><path id="path4" d="" stroke="none" fill="#846ce4" fill-rule="evenodd"/></g></svg>
				</a>
			</div>
			<div class="t4-import-head-label d-flex align-items-center">
				<span class="link-purchase">
					<span>Bulk Create Products Tags v2.0.0</span>
				</span>
				<span class="t4-import-btn-close">Close</span>
			</div>
		</div>
		<div class="t4-import-content">
			<div class="t4-import-alert t4-import-alert-success">
				<form id="t4_import_submit" method="post" accept-charset="utf-8">
					<div class="d-flex justify-content-between">
						<div class="t4-infor">
							<label for="t4-select-collection">Choose a collection</label>
							<select id="t4-select-collection" name="collection">
								<option value="all-prd" data-pCount="{{shop.products_count}}">All products</option>
								{% for collection in collections limit: 250 %}
								<option value="{{collection.id}}" data-pCount="{{collection.all_products_count}}">{{collection.title}}</option>
								{% endfor %}
							</select>
							<div style="margin-top: 30px">
								<ul class="infor-action" style="padding-left: 15px">
									<li><strong>Bulk filter:</strong><span> Adds tags for filter.</span></li>
									<li><strong>Bulk filter By collection:</strong><span> <br>Adds tags for search with categories.</span></li>
									<li><strong>Add:</strong><span> Adds tags to the existing ones.</span></li>
									<li><strong>Set:</strong><span> Replaces tags with new ones.</span></li>
									<li><strong>Remove:</strong><span> Removes matching tags.</span></li>
									<li><strong>Toggle:</strong><span> Future Use, disabled...</span></li>
								</ul>
							</div>
						</div>
						<div class="t4-action">
							<label for="t4-import-set-tags">Set the tags</label>
							<textarea id="t4-import-set-tags" name="t4-import-set-tags" placeholder="tag1, tag2,..." rows="3"></textarea>
							<div class="d-flex justify-content-between">
								<select id="t4-select-action" name="action">
									<option value="bulkfilter">Bulk Filter</option>
									<option value="bulkfilterbycollection">Bulk Filter By Collection</option>
									<option value="add">Add</option>
									<option value="set">Set</option>
									<option value="remove">Remove</option>
									<option disabled="" value="toggle">Toggle</option>
									<option value="purge" style="background:#F44336;color:#fff">DELETE ALL</option>
								</select>
								<button class="t4-btn" type="submit">Update tags</button>
								<div style="width: 100%">
									<div class="d-flex aligm-items-center" style="margin-top: 15px;">
										<input type="checkbox" class="form-check-input" id="lastUpdate" name="last_update" style="padding: 0;height: auto;margin-right: 10px;margin-top: 2px;">
								    <label class="form-check-label" for="lastUpdate" style="margin-bottom: 0;color: #333;line-height: 1.15;">Applies to products after the last update.</label>
									</div>
								</div>
							</div>
						</div>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

<style type="text/css">
	.open-import .t4-import{
	  display:flex;
	  display:-ms-flexbox;
	}
	.t4-import a{
    text-decoration: none;
	}
	.t4-import p{
	  margin-top:0;
	  margin-bottom:25px
	}
	.t4-import img{
	  border-style:none
	}
	.t4-import button,.t4-import input{
	  font-size:14px;
	  line-height:1.15;
	  margin:0;
	  overflow:visible;
	  padding:7px 20px;
	  height:42px
	}
	.t4-import button{
	  -webkit-appearance:button;
	  -webkit-writing-mode:horizontal-tb!important;
	  text-rendering:auto;
	  color:buttontext;
	  letter-spacing:normal;
	  word-spacing:normal;
	  text-transform:none;
	  text-indent:0;
	  text-shadow:none;
	  display:inline-block;
	  text-align:center;
	  align-items:flex-start;
	  font-family:Arial
	}
	.t4-import button::-moz-focus-inner{
	  border-style:none;
	  padding:0
	}
	.t4-import button:-moz-focusring{
	  outline:1px dotted ButtonText
	}
	@-moz-keyframes spin{
	  0%{
      -moz-transform:rotate(0)
	  }
	  100%{
      -moz-transform:rotate(359deg)
	  }
	}
	@-webkit-keyframes spin{
	  0%{
      -webkit-transform:rotate(0)
	  }
	  100%{
      -webkit-transform:rotate(359deg)
	  }
	}
	@-o-keyframes spin{
	  0%{
      -o-transform:rotate(0)
	  }
	  100%{
      -o-transform:rotate(359deg)
	  }
	}
	@-ms-keyframes spin{
	  0%{
      -ms-transform:rotate(0)
	  }
	  100%{
      -ms-transform:rotate(359deg)
	  }
	}
	@keyframes spin{
	  0%{
      transform:rotate(0)
	  }
	  100%{
      transform:rotate(359deg)
	  }
	}
	.cl-indigo{
	  color:#5c6ac4!important
	}
	.cl-carnation{
	  color:#f76b6a!important
	}
	.d-flex{
	  display:-ms-flexbox;
	  display:flex;
	  flex-wrap: wrap;
	}
	.align-items-center{
	  -ms-flex-align:center;
	  align-items:center
	}
	.justify-content-center{
	  -ms-flex-pack:center;
	  justify-content:center
	}
	.justify-content-between{
	  justify-content:space-between;
	  -ms-flex-pack:justify
	}
	.t4-import{
		display: none;
	  width:100%;
	  height:100%;
	  position:fixed;
	  z-index:999999;
	  top:0;
	  left:0;
	  align-items:center;
	  -ms-flex-align:center;
	  justify-content:center;
	  -ms-flex-pack:center;
	  font-family:Arial;
	  font-size:14px;
	  direction:ltr;
	  color:#333;
	  background-color:rgba(0,0,0,.7)
	}
	.t4-import-popup{
	  background-color:#fff;
	  border-radius:3px;
	  width:100%;
	  max-width:850px;
	  box-shadow:0 0 10px 5px #616161
	}
	.t4-import-head{
	  padding:10px 20px;
	  border-bottom:1px solid #f7f7f7;
	  display:flex;
	  display:-ms-flexbox;
	  align-items:center;
	  -ms-flex-align:center;
	  justify-content:space-between;
	  -ms-flex-pack:justify
	}
	.t4-logo{
	  display:flex;
	  display:-ms-flexbox
	}
	.link-purchase{
	  display:flex;
	  display:-ms-flexbox;
	  align-items:center;
	  -ms-flex-align:center
	}
	.t4-import-btn-close{
	  cursor: pointer;
    position: relative;
    padding-left: 30px;
	  color:#f76b6a;
	}
	.t4-import-btn-close:before{
		content: '';
    position: absolute;
    top: 50%;
    left: 10px;
    margin-top: -1px;
    border-top: 1px solid #777;
    width: 15px;
	}
	.t4-import-head svg{
	  width:60px;
	  height:27px;
	  line-height:1
	}
	.t4-import-content{
	  padding:45px 25px
	}
	.t4-import-content .t4-infor {
    width: 40%;
	}
	.t4-import-content .t4-action {
    width: 60%;
	}
	.t4-import-content label {
    display: block;
    color: #637381;
    margin-bottom: 15px;
	}
	.t4-import-content textarea{
	  width: 100%;
    border: 1px solid #5c6ac4;
    border-radius: 3px;
    margin-bottom: 20px;
    padding: 12px;
    height: 130px;
	}
	.t4-import-content select {
    padding: 12px;
    color: #5c6cc4;
    border-color: #5c6cc4;
    border-radius: 3px;
    width: 170px;
    outline: none !important;
    height: auto;
    font-family: Arial;
	}
	.t4-import-content select.t4-select-action {
    border-style: dashed;
	}
	.t4-import-content .infor-action{
		font-size: 14px;
    color: #5c6ac4;
    list-style: circle;
    line-height: 24px;
	}
	.t4-import-content .infor-action span{
    color: #777;
	}
	.t4-btns{
	  justify-content:center;
	  -ms-flex-pack:center
	}
	button.t4-btn{
    padding: 12px;
	  border-radius:3px;
	  box-shadow:none!important;
	  outline:0!important;
	  color: #fff;
	  border:1px solid #5c6ac4;
	  background-color: #5c6ac4;
	  min-width:170px;
	  font-weight:600;
	  cursor:pointer;
	  position:relative;
	  text-align:center;
	  -webkit-transition:all .3s;
	  transition:all .3s;
    text-transform: uppercase;
	}
	.t4-btn:hover{;
	  color: #fff;
	  border:1px solid #f76b6a;
	  background-color: #f76b6a;
	}
	.t4-btn.loading{
	  pointer-events:none;
	}
	.t4-btn.loading::after{
	  content:'\e800';
	  position:absolute;
	  display:inline-block;
	  color:transparent;
	  border:2px solid;
	  margin-top:-8px;
	  top:50%;
	  left:10px;
	  width:16px;
	  height:16px;
	  border-radius:50px;
	  border-color:#616161 #e0e0e0 #e0e0e0 #e0e0e0;
	  line-height:1;
	  -webkit-animation:spin 1s infinite linear;
	  -moz-animation:spin 1s infinite linear;
	  -o-animation:spin 1s infinite linear;
	  animation:spin 1s infinite linear
	}
	.t4-btn svg{
	  fill:currentcolor;
	  width:18px;
	  height:18px;
	  margin-right:10px
	}
</style>
<script>
  let shopiAlert = function(a, c) {
    //"function" === typeof Shopify.Flash.error && "function" === typeof Shopify.Flash.notice && (c ? Shopify.Flash.error(a) : Shopify.Flash.notice(a))
  };
  let uniqArray = function(array) {
    let a = array.concat();
    for(let i=0; i<a.length; ++i) {
      for(let j=i+1; j<a.length; ++j) {
        if(a[i] === a[j])
        a.splice(j--, 1);
      }
    }
    return a;
  };

  let removeItemInArray = function(array, splice) {
	  for( let i = 0; i < array.length; ++i){ 
		  for( let j = 0; j < splice.length; ++j){ 
		  	if ( array[i] === splice[j]) {
		    	array.splice(i, 1); 
		  	}
		  }
	  }
	  return array;
	}

	let url = "";
  let set_tags = '';
  let productsCount_ = collectionsCount_= 0;
	let after_last = false;
	let after_last_date = localStorage.getItem('t4-last-update');	
  let price_list = {{settings.filter_price_list| replace: ', ',',' | replace: ' ,',','| split: ','|json}};
  let page_number = -1;
	if (after_last_date === null) {
		jQuery_T4NT('#lastUpdate').attr('disabled', 'disabled');
	}
	let allCollection = new Array;
	jQuery_T4NT.each(jQuery_T4NT('#t4-select-collection option'), function(index, val) {
		if (jQuery_T4NT(this).attr('value') === 'all-prd') {return}
		let itemCollection = {
			'id' : jQuery_T4NT(this).attr('value'),
			'pCount' : jQuery_T4NT(this).attr('data-pCount')
		};
		allCollection.push(itemCollection)
	});
	// console.log(allCollection)
	var csrf_token = 'no_token';
	jQuery_T4NT.ajax({
	    type: "GET",
	    url: "/admin/themes/{{theme.id}}",
	    success: function (data){
	      csrf_token = data.split('name="csrf-token"')[1].split(" />")[0].split('"')[1];
	      //console.log(csrf_token)
	    }
	});

	jQuery_T4NT(document).on('click', '.t4-import-btn-close', function(event){
		event.preventDefault();
		jQuery_T4NT('body').removeClass('open-import');
	})
	
	let btnUpdate = jQuery_T4NT('#t4_import_submit button[type="submit"]');
	jQuery_T4NT(document).on('submit', '#t4_import_submit', function(event){
		event.preventDefault();
		btnUpdate.addClass('loading');
		let action_options = jQuery_T4NT('#t4_import_submit').serializeArray();
		// console.log(action_options);
		let id_collection = action_options[0].value;
		set_tags = action_options[1].value;
		let action_import = action_options[2].value;
		after_last = action_options[3] !== undefined ? true : false;
		// console.log(id_collection, set_tags, action_import, after_last);

	    productsCount_ = jQuery_T4NT('option[value="'+id_collection+'"]').attr('data-pCount');

	    // if (action_import === 'bulkfilter' || action_import === 'bulkfilterbycollection') {
		   //  id_collection = 'all-prd';
	    // }

	    if(id_collection == "all-prd"){
	      url = "/admin/api/2021-07/products.json?fields=id,tags,options,vendor,type,variants&limit=250";
		    productsCount_ = jQuery_T4NT('option[value="all-prd"]').attr('data-pCount');
	    }
	    else{
	      url = "/admin/api/2021-07/products.json?collection_id=" + id_collection + "&fields=id,tags,options,vendor,type,variants&limit=250";
	    }
	    if (after_last && after_last_date !== null) {
	      url = url + "&updated_at_min="+after_last_date;
	    }

	    page_number = -1;
	    //console.log(id_collection,'   :'+productsCount_);

	    getProductsJson(id_collection, url, action_import);
	})

	let getProductsJson = function(id_collection, url, action, callback){
		// console.log(id_collection, page, action);
    // console.log(url)
    if(action === 'bulkfilterbycollection'){
	    page_number = -1;
    	set_tags = allCollection[collectionsCount_].id;
    	productsCount_ = allCollection[collectionsCount_].pCount;
      url = "/admin/api/2021-07/products.json?collection_id=" + allCollection[collectionsCount_].id + "&fields=id,tags,options,vendor,type,variants&limit=250";
	    if (after_last && after_last_date !== null) {
	      url = url + "&updated_at_min="+after_last_date;
	    }
      getProductsJson(allCollection[collectionsCount_].id, url, 'add', function() {
				++collectionsCount_;
      	if (collectionsCount_ < allCollection.length) {
        	getProductsJson(id_collection, url, action);
      	}
      	else {
          btnUpdate.text("Update tags").removeClass("loading");
          localStorage.setItem('t4-last-update', after_last_date);
      		shopiAlert("Done. Tags have been added");
      	}
    	});
    }
    else {    	
	    ++page_number;
	    jQuery_T4NT.ajax({
	      type: "GET",
	      url: url,
	      dataType: "json",
          headers: {
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "x-csrf-token": csrf_token
          },
	      success: function(dataProduct, status, xhr) {
					if(dataProduct.products.length > 0){
						if("add" === action){
	            addTags(dataProduct.products, 0, set_tags, function() {
	            	if (xhr.getResponseHeader("link") !== null && xhr.getResponseHeader("link").indexOf('>; rel="next"') > 0) {
				        	url = xhr.getResponseHeader("link").split('>; rel="next"')[0].split('.myshopify.com');
				        	getProductsJson(id_collection, url[url.length-1], action);
	            	}
	            	else if("function" === typeof callback){
	            		callback();
	            	}
	            	else {
	                btnUpdate.text("Update tags").removeClass("loading");
				          localStorage.setItem('t4-last-update', after_last_date);
				          jQuery_T4NT('#lastUpdate').attr('disabled', false);
	            		shopiAlert("Done. Tags have been added");
	            	}
	            })
	          }          
	          else if("purge" === action || "set" === action){
	            setTags(dataProduct.products, 0, set_tags, function() {
	            	if (xhr.getResponseHeader("link") !== null && xhr.getResponseHeader("link").indexOf('>; rel="next"') > 0) {
				        	url = xhr.getResponseHeader("link").split('>; rel="next"')[0].split('.myshopify.com');
				        	getProductsJson(id_collection, url[url.length-1], action);
	            	}
	            	else {
	                btnUpdate.text("Update tags").removeClass("loading");
				          localStorage.setItem('t4-last-update', after_last_date);
				          jQuery_T4NT('#lastUpdate').attr('disabled', false);
	            		shopiAlert("Done.");
	            	}
	            })
	          }
	          else if("remove" === action){
	            removeTags(dataProduct.products, 0, set_tags, function() {
	            	if (xhr.getResponseHeader("link") !== null && xhr.getResponseHeader("link").indexOf('>; rel="next"') > 0) {
				        	url = xhr.getResponseHeader("link").split('>; rel="next"')[0].split('.myshopify.com');
				        	getProductsJson(id_collection, url[url.length-1], action);
	            	}
	            	else {
	                btnUpdate.text("Update tags").removeClass("loading");
				          localStorage.setItem('t4-last-update', after_last_date);
				          jQuery_T4NT('#lastUpdate').attr('disabled', false);
	            		shopiAlert("Matched tags have been removed.");
	            	}
	            })
	          }
	          else if("bulkfilter" === action){
	            addTagsForFilter(dataProduct.products, 0, set_tags, function() {
	            	if (xhr.getResponseHeader("link") !== null && xhr.getResponseHeader("link").indexOf('>; rel="next"') > 0) {
				        	url = xhr.getResponseHeader("link").split('>; rel="next"')[0].split('.myshopify.com');
				        	getProductsJson(id_collection, url[url.length-1], action);
	            	}
	            	else {
	                btnUpdate.text("Update tags").removeClass("loading");
				          localStorage.setItem('t4-last-update', after_last_date);
				          jQuery_T4NT('#lastUpdate').attr('disabled', false);
	            		shopiAlert("Done. Tags for filter have been added");
	            	}
	            })
	          }
					}
	        else{
	          shopiAlert("Done.");
	          btnUpdate.text("Update tags").removeClass("loading")
	        }
	      }
	    });
    }
	}

	let addTags = function(products, position, set_tags, callback){
    var tags_new = set_tags.replace(/, /g, ",").split(","),
        tag_current = products[position].tags.replace(/, /g, ",").split(",");
    let tag_add = uniqArray(tags_new.concat(tag_current)) + "";
    let prd_id = products[position].id;
    let prd_adding = {
		      product: {
		        id: prd_id,
		        tags: tag_add
		      }
		    };
    btnUpdate.text(position + (page_number * 250) + "/" + productsCount_);
    jQuery_T4NT.ajax({
      type: "PUT",
      url: "/admin/api/2021-07/products/" + prd_id + ".json",
      data: prd_adding,
	  headers: {
	    "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
	    "x-csrf-token": csrf_token
	  },
      dataType: "json",
      success: function(c) {
      	after_last_date = c.product.updated_at;
        ++position;
		    btnUpdate.text(position + (page_number * 250) + "/" + productsCount_);
        position < products.length ? addTags(products, position, set_tags, callback) : "function" === typeof callback && callback()
      }
    })
  }

	let addTagsForFilter = function(products, position, set_tags, callback){
	    var tags_new = set_tags.replace(/, /g, ",").split(","),
	        tag_current = products[position].tags.replace(/, /g, ",").split(",");
	    var tagsObj = [];
	    jQuery_T4NT.each(products[position].options, function(idx,optionObj) {
	      if(optionObj.name === 'Title'){return false;}
	      var name = optionObj.name+"  ";
	      jQuery_T4NT.each(optionObj.values, function(idx,valueObj) {
	        var name_ = name + valueObj;
	        tagsObj.push(name_);
	      });
	    });
	    if(products[position].vendor !== undefined){
	      tagsObj.push('Vendor  '+products[position].vendor);
	    }
	    if(products[position].type !== undefined){
	      tagsObj.push('Type  '+products[position].type);
	    }
	    var h = 0;
	    jQuery_T4NT.each( price_list, function(i,itemPrice) {
	      if(h > 0){return;}
	      if(itemPrice.indexOf('+') < 0){
	        var e1 = itemPrice.split('-')[0].replace(/[^0-9.]/g, ""),
	            e2 = itemPrice.split('-')[1].replace(/[^0-9.]/g, ""),
	            price = products[position].variants[0].price;
	        if(+e1 <= +price && +price <= +e2 && h == 0){
	          tagsObj.push('Price  '+itemPrice);h++;
	        }
	      }
	      else if(itemPrice.indexOf('+') >= 0){
	        var e1 = itemPrice.split('+')[0].replace(/[^0-9.]/g, "")
	        if(+e1 <= +price && h == 0){
	          tagsObj.push('Price  '+itemPrice.replace('+',''));h++;
	        }
	      }
	    });
	    tag_add = uniqArray(tagsObj.concat(tag_current).concat(tags_new)) + "";
	    prd_id = products[position].id;
	    prd_adding = {
	      product: {
	        id: prd_id,
	        tags: tag_add
	      }
	    };
	    btnUpdate.text(position + (page_number * 250) + "/" + productsCount_);
	    if((prd_adding.product.tags).length > 0){
	      jQuery_T4NT.ajax({
	        type: "PUT",
	        url: "/admin/api/2021-07/products/" + prd_id + ".json",
	        data: prd_adding,
			headers: {
			    "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
			    "x-csrf-token": csrf_token
			},
	        dataType: "json",
	        success: function(c) {
		      	after_last_date = c.product.updated_at;
	          ++position;
	          btnUpdate.text(position + (page_number * 250) + "/" + productsCount_);
	          position < products.length ? addTagsForFilter(products, position, set_tags, callback) : "function" === typeof callback && callback();
	        }
	      })
	    }
	    else{
	      ++position;
	      btnUpdate.text(position + (page_number * 250) + "/" + productsCount_);
	      position < products.length ? addTagsForFilter(products, position, set_tags, callback) : "function" === typeof callback && callback();
	    }
	  }

  let removeTags = function(products, position, set_tags, callback){
    if(products[position].tags) {
	    var tags_new = set_tags.replace(/, /g, ",").split(","),
	        tag_current = products[position].tags.replace(/, /g, ",").split(",");
      let tag_remove = removeItemInArray(tag_current, tags_new);
      let prd_id = products[position].id;
      let prd_removing = {
		      product: {
		        id: prd_id,
		        tags: tag_remove
		      }
		    };
      btnUpdate.text(position + (page_number * 250) + "/" + productsCount_);
      jQuery_T4NT.ajax({
        type: "PUT",
        url: "/admin/api/2021-07/products/" + prd_id + ".json",
        data: prd_removing,
		headers: {
		  "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
		  "x-csrf-token": csrf_token
		},
        dataType: "json",
        success: function(c) {
	      	after_last_date = c.product.updated_at;
          ++position;
          btnUpdate.text(position + (page_number * 250) + "/" + productsCount_);
          position < products.length ? removeTags(products, position, set_tags, callback) : "function" === typeof callback && callback()
        }
      })
    }
    else{
      ++position;
      btnUpdate.text(position + (page_number * 250) + "/" + productsCount_);
      position < products.length ? removeTags(products, position, set_tags, callback) : "function" === typeof callback && callback()
    }
  }
  let setTags = function(products, position, set_tags, callback) {
    var prd_id = products[position].id,
        prd_set = {
          product: {
            id: prd_id,
            tags: set_tags
          }
        };
    btnUpdate.text(position + "/" + products.length);
    jQuery_T4NT.ajax({
      type: "PUT",
      url: "/admin/products/" + prd_id + ".json",
      data: prd_set,
      headers: {
        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
        "x-csrf-token": csrf_token
      },
      dataType: "json",
      success: function(c) {
      	after_last_date = c.product.updated_at;
        ++position;
        btnUpdate.text(position + "/" + products.length);
        position < products.length ? setTags(dataProduct.products, 0, set_tags, callback) : "function" === typeof calback && calback()
      }
    })
  }
</script>